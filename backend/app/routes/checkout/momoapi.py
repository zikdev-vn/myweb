# Dang dung FlaskAPI
from fastapi import APIRouter, HTTPException
from fastapi import FastAPI, Request, HTTPException
from pydantic import BaseModel
import uuid, hmac, hashlib, requests
from typing import Dict



router = APIRouter()

# MoMo Payment Config
MOMO_ENDPOINT = "https://test-payment.momo.vn/v2/gateway/api/create"
ACCESS_KEY = "F8BBA842ECF85"
SECRET_KEY = "K951B6PE1waDMi640xX08PD3vg6EkVlz"
PARTNER_CODE = "MOMO"
REDIRECT_URL = "https://allowing-terrapin-eminently.ngrok-free.app/api/call-back"
IPN_URL = "https://webhook.site/b3088a6a-2d17-4f8d-a383-71389a6c600b"

MOMO_QUERY_ENDPOINT = "https://test-payment.momo.vn/v2/gateway/api/query"

transaction_data={}

# Class nh·∫≠n callback t·ª´ MoMo
class MoMoCallback(BaseModel):
    resultCode: int
    message: str
    orderId: str
    amount: int
    requestId: str  # Th√™m requestId v√†o callback ƒë·ªÉ l∆∞u l·∫°i

# Nh·∫≠n callback t·ª´ MoMo v√† l∆∞u l·∫°i th√¥ng tin
@router.post("/call-back")
async def call_back(data: MoMoCallback):
    if data.resultCode == 0:
        # L∆∞u d·ªØ li·ªáu v√†o bi·∫øn to√†n c·ª•c (n√™n thay b·∫±ng database th·ª±c t·∫ø)
        transaction_data[data.orderId] = {
            "orderId": data.orderId,
            "requestId": data.requestId,
            "amount": data.amount,
            "message": data.message
        }
        print("üî• Nh·∫≠n callback t·ª´ MoMo:", data)
        return {
            "status": "success",
            "message": data.message,
            "orderId": data.orderId,
            "amount": data.amount
        }
    else:
        raise HTTPException(status_code=400, detail=data.message)
# Class y√™u c·∫ßu tr·∫°ng th√°i giao d·ªãch
class QueryRequest(BaseModel):
    orderId: str
    requestId: str

# API ki·ªÉm tra tr·∫°ng th√°i giao d·ªãch
from fastapi import Depends
from sqlalchemy.orm import Session
from app.models import TransactionHistory, User  # ƒë·∫£m b·∫£o b·∫°n c√≥ model n√†y
from app.database import get_db
from app.routes.Login.login import get_optional_user  # h√†m decode access_token

@router.post("/transaction-status")
def transaction_status(
    query: QueryRequest,
    db: Session = Depends(get_db),
    current_user: User = Depends(get_optional_user)
):
    print(f"üîç Nh·∫≠n y√™u c·∫ßu ki·ªÉm tra tr·∫°ng th√°i t·ª´ client:")
    print(f"orderId: {query.orderId}, requestId: {query.requestId}")

    if query.orderId not in transaction_data:
        raise HTTPException(status_code=400, detail="OrderId kh√¥ng h·ª£p l·ªá")

    saved_data = transaction_data[query.orderId]
    request_id = query.requestId if query.requestId else saved_data["requestId"]

    # T·∫°o raw signature
    raw_signature = (
        f"accessKey={ACCESS_KEY}&orderId={query.orderId}&partnerCode={PARTNER_CODE}&requestId={request_id}"
    )
    print(f"üîç T·∫°o ch·ªØ k√Ω v·ªõi raw_signature: {raw_signature}")

    signature = hmac.new(
        SECRET_KEY.encode("utf-8"),
        raw_signature.encode("utf-8"),
        hashlib.sha256
    ).hexdigest()

    payload = {
        "partnerCode": PARTNER_CODE,
        "orderId": query.orderId,
        "requestId": request_id,
        "lang": "vi",
        "signature": signature
    }

    print(f"üîç Payload g·ª≠i ƒë·∫øn MoMo: {payload}")

    try:
        response = requests.post(MOMO_QUERY_ENDPOINT, json=payload)

        if response.status_code == 200:
            result = response.json()
            print("üì° K·∫øt qu·∫£ truy v·∫•n tr·∫°ng th√°i t·ª´ MoMo:")
            print(result)

            # N·∫øu c√≥ ng∆∞·ªùi d√πng ƒëang ƒëƒÉng nh·∫≠p v√† giao d·ªãch th√†nh c√¥ng
            if current_user and result.get("resultCode") == 0:
                transaction = TransactionHistory(
                    user_id=current_user.id,
                    order_id=query.orderId,
                    request_id=request_id,
                    amount=result.get("amount"),
                    status=result.get("message"),
                    
                )
                db.add(transaction)
                db.commit()
                print("‚úÖ ƒê√£ l∆∞u transaction th√†nh c√¥ng:", transaction)
            return result
        else:
            print(f"‚ùå L·ªói khi g·ªçi MoMo API. M√£ tr·∫°ng th√°i: {response.status_code}")
            raise HTTPException(status_code=500, detail="Kh√¥ng th·ªÉ truy v·∫•n tr·∫°ng th√°i giao d·ªãch")

    except Exception as e:
        print(f"‚ùå L·ªói khi x·ª≠ l√Ω y√™u c·∫ßu: {e}")
        raise HTTPException(status_code=500, detail="Kh√¥ng th·ªÉ truy v·∫•n tr·∫°ng th√°i giao d·ªãch")



class PaymentRequest(BaseModel):
    amount: int  # nh·∫≠n t·ª´ frontend

@router.post("/create-payment")
def create_payment(req: PaymentRequest):
    # MoMo Config (d√πng t·∫°m, n√™n chuy·ªÉn qua bi·∫øn m√¥i tr∆∞·ªùng)
    endpoint = "https://test-payment.momo.vn/v2/gateway/api/create"
    partnerCode = "MOMO"
    accessKey = "F8BBA842ECF85"
    secretKey = "K951B6PE1waDMi640xX08PD3vg6EkVlz"
    orderInfo = "Thanh to√°n ƒë∆°n h√†ng"
    redirectUrl = "http://localhost:3000/Cart"
    ipnUrl = "https://allowing-terrapin-eminently.ngrok-free.app/api/call-back"
    amount = str(req.amount)
    orderId = str(uuid.uuid4())
    requestId = str(uuid.uuid4())
    requestType = "captureWallet"
    extraData = ""

    # Raw signature
    raw_signature = (
        f"accessKey={accessKey}&amount={amount}&extraData={extraData}&ipnUrl={ipnUrl}"
        f"&orderId={orderId}&orderInfo={orderInfo}&partnerCode={partnerCode}"
        f"&redirectUrl={redirectUrl}&requestId={requestId}&requestType={requestType}"
    )

    # K√Ω HMAC SHA256
    signature = hmac.new(
        secretKey.encode("utf-8"),
        raw_signature.encode("utf-8"),
        hashlib.sha256
    ).hexdigest()

    # Payload g·ª≠i t·ªõi MoMo
    data = {
        "partnerCode": partnerCode,
        "partnerName": "Test",
        "storeId": "MomoTestStore",
        "requestId": requestId,
        "amount": amount,
        "orderId": orderId,
        "orderInfo": orderInfo,
        "redirectUrl": redirectUrl,
        "ipnUrl": ipnUrl,
        "lang": "vi",
        "extraData": extraData,
        "requestType": requestType,
        "signature": signature
    }

    try:
        response = requests.post(endpoint, json=data, headers={'Content-Type': 'application/json'})
        result = response.json()

        if "payUrl" in result:
            print("üéØ K·∫øt qu·∫£ t·ª´ MoMo:", result)
            return {
                "orderId": orderId,
                "requestId": requestId,
                "payUrl": result["payUrl"],
                "resultCode": result["resultCode"],
                "message": result["message"]
            }
        else:
            raise HTTPException(status_code=400, detail="Kh√¥ng l·∫•y ƒë∆∞·ª£c payUrl t·ª´ MoMo.")
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"L·ªói h·ªá th·ªëng: {str(e)}")